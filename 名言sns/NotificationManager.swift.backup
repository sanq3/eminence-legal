import Foundation
import UserNotifications
import Firebase
import FirebaseMessaging
import FirebaseFirestore
import FirebaseAuth

class NotificationManager: NSObject, ObservableObject, UNUserNotificationCenterDelegate, MessagingDelegate {
    static let shared = NotificationManager()
    
    @Published var notificationsEnabled = false
    @Published var fcmToken: String?
    
    private let db = Firestore.firestore()
    
    private override init() {
        super.init()
        UNUserNotificationCenter.current().delegate = self
        Messaging.messaging().delegate = self
    }
    
    // 通知の許可をリクエスト
    func requestAuthorization() {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { [weak self] granted, error in
            if let error = error {
                print("通知許可リクエストエラー: \(error.localizedDescription)")
            }
            
            DispatchQueue.main.async {
                self?.notificationsEnabled = granted
                if granted {
                    UIApplication.shared.registerForRemoteNotifications()
                }
            }
        }
    }
    
    // 現在の通知設定を確認
    func checkNotificationStatus() {
        UNUserNotificationCenter.current().getNotificationSettings { [weak self] settings in
            DispatchQueue.main.async {
                self?.notificationsEnabled = settings.authorizationStatus == .authorized
            }
        }
    }
    
    // FCMトークンの更新をFirestoreに直接送信
    func updateFCMToken(_ token: String) {
        guard let uid = Auth.auth().currentUser?.uid else { return }
        
        db.collection("users").document(uid).setData([
            "fcmToken": token,
            "notificationsEnabled": true,
            "updatedAt": FieldValue.serverTimestamp()
        ], merge: true) { error in
            if let error = error {
                print("FCMトークン更新エラー: \(error.localizedDescription)")
            } else {
                print("FCMトークンが正常に更新されました")
            }
        }
    }
    
    // 通知設定の更新
    func updateNotificationSettings(enabled: Bool, notificationTime: String? = nil) {
        guard let uid = Auth.auth().currentUser?.uid else { return }
        
        var data: [String: Any] = [
            "notificationsEnabled": enabled,
            "updatedAt": FieldValue.serverTimestamp()
        ]
        
        if let time = notificationTime {
            data["notificationTime"] = time
        }
        
        db.collection("users").document(uid).setData(data, merge: true) { error in
            if let error = error {
                print("通知設定更新エラー: \(error.localizedDescription)")
            } else {
                print("通知設定が正常に更新されました")
            }
        }
    }
    
    // MARK: - UNUserNotificationCenterDelegate
    
    // フォアグラウンドで通知を受信した時
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        completionHandler([.banner, .badge, .sound])
    }
    
    // 通知をタップした時
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        // 通知タップ時の処理
        let userInfo = response.notification.request.content.userInfo
        print("通知タップ: \(userInfo)")
        completionHandler()
    }
    
    // MARK: - MessagingDelegate
    
    // FCMトークンが更新された時
    func messaging(_ messaging: Messaging, didReceiveRegistrationToken fcmToken: String?) {
        guard let token = fcmToken else { return }
        self.fcmToken = token
        print("FCMトークン: \(token)")
        updateFCMToken(token)
    }
}