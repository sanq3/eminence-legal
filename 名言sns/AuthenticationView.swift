import SwiftUI
import FirebaseAuth
import UIKit

struct AuthenticationView: View {
    @State private var email = ""
    @State private var password = ""
    @State private var confirmPassword = ""
    @State private var isSignUp = false
    @State private var showingAlert = false
    @State private var alertMessage = ""
    @State private var isLoading = false
    @State private var showPassword = false
    @State private var showConfirmPassword = false
    @Environment(\.dismiss) var dismiss
    
    // Apple/Google Sign-In
    @StateObject private var appleSignInManager = AppleSignInManager()
    @StateObject private var googleSignInManager = GoogleSignInManager()
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                Spacer()
                
                // „Ç¢„Éó„É™„É≠„Ç¥„Éª„Çø„Ç§„Éà„É´
                VStack(spacing: 8) {
                    Text("üí¨")
                        .font(.system(size: 60))
                    Text("„Ç®„Éü„Éç„É≥„Çπ")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                    Text(isSignUp ? "„Ç¢„Ç´„Ç¶„É≥„Éà„Çí‰ΩúÊàê" : "„É≠„Ç∞„Ç§„É≥")
                        .font(.title2)
                        .foregroundColor(.secondary)
                }
                .padding(.bottom, 40)
                
                // ÂÖ•Âäõ„Éï„Ç©„Éº„É†
                VStack(spacing: 16) {
                    // „É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÂÖ•Âäõ
                    TextField("„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ", text: $email)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .keyboardType(.emailAddress)
                        .textContentType(.emailAddress)
                        .autocapitalization(.none)
                        .disableAutocorrection(true)
                        .textInputAutocapitalization(.never)
                    
                    // „Éë„Çπ„ÉØ„Éº„ÉâÂÖ•Âäõ„Éï„Ç£„Éº„É´„ÉâÔºàË°®Á§∫Âàá„ÇäÊõø„Åà‰ªò„ÅçÔºâ
                    ZStack(alignment: .trailing) {
                        if showPassword {
                            TextField("„Éë„Çπ„ÉØ„Éº„Éâ", text: $password)
                                .textFieldStyle(RoundedBorderTextFieldStyle())
                                .autocapitalization(.none)
                                .disableAutocorrection(true)
                                .textInputAutocapitalization(.never)
                        } else {
                            SecureField("„Éë„Çπ„ÉØ„Éº„Éâ", text: $password)
                                .textFieldStyle(RoundedBorderTextFieldStyle())
                                .textContentType(.password)
                                .autocapitalization(.none)
                                .disableAutocorrection(true)
                                .textInputAutocapitalization(.never)
                        }
                        
                        Button(action: {
                            showPassword.toggle()
                        }) {
                            Image(systemName: showPassword ? "eye.slash.fill" : "eye.fill")
                                .foregroundColor(.secondary)
                                .padding(.trailing, 8)
                        }
                    }
                    
                    // „Éë„Çπ„ÉØ„Éº„ÉâÁ¢∫Ë™ç„Éï„Ç£„Éº„É´„ÉâÔºà„Çµ„Ç§„É≥„Ç¢„ÉÉ„ÉóÊôÇ„ÅÆ„ÅøÔºâ
                    if isSignUp {
                        ZStack(alignment: .trailing) {
                            if showConfirmPassword {
                                TextField("„Éë„Çπ„ÉØ„Éº„ÉâÔºàÁ¢∫Ë™çÔºâ", text: $confirmPassword)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                    .autocapitalization(.none)
                                    .disableAutocorrection(true)
                                    .textInputAutocapitalization(.never)
                            } else {
                                SecureField("„Éë„Çπ„ÉØ„Éº„ÉâÔºàÁ¢∫Ë™çÔºâ", text: $confirmPassword)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                    .autocapitalization(.none)
                                    .disableAutocorrection(true)
                                    .textInputAutocapitalization(.never)
                            }
                            
                            Button(action: {
                                showConfirmPassword.toggle()
                            }) {
                                Image(systemName: showConfirmPassword ? "eye.slash.fill" : "eye.fill")
                                    .foregroundColor(.secondary)
                                    .padding(.trailing, 8)
                            }
                        }
                    }
                }
                .padding(.horizontal, 40)
                
                
                // „É°„Ç§„É≥„Éú„Çø„É≥
                Button(action: {
                    if isSignUp {
                        signUp()
                    } else {
                        signIn()
                    }
                }) {
                    HStack {
                        if isLoading {
                            ProgressView()
                                .progressViewStyle(CircularProgressViewStyle(tint: .white))
                                .scaleEffect(0.8)
                        }
                        Text(isSignUp ? "„Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê" : "„É≠„Ç∞„Ç§„É≥")
                            .fontWeight(.semibold)
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
                }
                .disabled(email.isEmpty || password.isEmpty || isLoading)
                .padding(.horizontal, 40)
                .padding(.top, 20)
                
                // Âàá„ÇäÊõø„Åà„Éú„Çø„É≥
                Button(action: {
                    isSignUp.toggle()
                }) {
                    Text(isSignUp ? "Êó¢„Å´„Ç¢„Ç´„Ç¶„É≥„Éà„Çí„ÅäÊåÅ„Å°„ÅÆÊñπ" : "„Ç¢„Ç´„Ç¶„É≥„Éà„Çí„ÅäÊåÅ„Å°„Åß„Å™„ÅÑÊñπ")
                        .foregroundColor(.blue)
                }
                .padding(.top, 10)
                
                Spacer()
                
                // „ÇΩ„Éº„Ç∑„É£„É´„É≠„Ç∞„Ç§„É≥
                VStack(spacing: 12) {
                    Button(action: {
                        // Apple Sign-In
                        appleSignInManager.onSignInSuccess = {
                            NotificationCenter.default.post(name: NSNotification.Name("UserLoggedIn"), object: nil)
                            dismiss()
                        }
                        appleSignInManager.onSignInError = { error in
                            alertMessage = error
                            showingAlert = true
                        }
                        appleSignInManager.startSignInWithAppleFlow()
                    }) {
                        HStack {
                            Image(systemName: "applelogo")
                            Text("Apple„Åß„Çµ„Ç§„É≥„Ç§„É≥")
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.black)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                    }
                    
                    // Google Sign-InÔºàÂæåÊó•ÂÆüË£Ö‰∫àÂÆöÔºâ
                    // SDK„ÅØËøΩÂä†Ê∏à„Åø„ÄÅFirebaseConsole„ÇÇË®≠ÂÆöÊ∏à„Åø
                    // TODO: Xcode„Åß„Çø„Éº„Ç≤„ÉÉ„Éà„Å∏„ÅÆ„É©„Ç§„Éñ„É©„É™„É™„É≥„ÇØ„ÅåÂøÖË¶Å
                    // ÂèÇÁÖß: GoogleSignInManager.swift
                    /*
                    Button(action: {
                        googleSignInManager.signInWithGoogle { success, error in
                            if success {
                                NotificationCenter.default.post(name: NSNotification.Name("UserLoggedIn"), object: nil)
                                dismiss()
                            } else {
                                alertMessage = error ?? "Google Sign-In„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
                                showingAlert = true
                            }
                        }
                    }) {
                        HStack {
                            Text("G")
                                .fontWeight(.bold)
                            Text("Google„Åß„Çµ„Ç§„É≥„Ç§„É≥")
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color(.systemGray6))
                        .foregroundColor(.primary)
                        .cornerRadius(10)
                    }
                    */
                }
                .padding(.horizontal, 40)
                .padding(.bottom, 30)
            }
            .navigationTitle("")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("„Ç≠„É£„É≥„Çª„É´") {
                        dismiss()
                    }
                }
            }
        }
        .alert("„Ç®„É©„Éº", isPresented: $showingAlert) {
            Button("‰∫ÜËß£") { }
        } message: {
            Text(alertMessage)
        }
    }
    
    private func signIn() {
        isLoading = true
        Auth.auth().signIn(withEmail: email, password: password) { result, error in
            isLoading = false
            if let error = error {
                alertMessage = error.localizedDescription
                showingAlert = true
            } else {
                // „É≠„Ç∞„Ç§„É≥ÊàêÂäüÂæå„ÄÅ„Éá„Éº„Çø„Çí„É™„É≠„Éº„Éâ
                NotificationCenter.default.post(name: NSNotification.Name("UserLoggedIn"), object: nil)
                dismiss()
            }
        }
    }
    
    private func signUp() {
        // „Éë„Çπ„ÉØ„Éº„Éâ„ÅÆÁ¢∫Ë™ç
        if password != confirmPassword {
            alertMessage = "„Éë„Çπ„ÉØ„Éº„Éâ„Åå‰∏ÄËá¥„Åó„Åæ„Åõ„Çì"
            showingAlert = true
            return
        }
        
        if password.count < 6 {
            alertMessage = "„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ6ÊñáÂ≠ó‰ª•‰∏ä„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
            showingAlert = true
            return
        }
        
        isLoading = true
        Auth.auth().createUser(withEmail: email, password: password) { result, error in
            if let error = error {
                isLoading = false
                alertMessage = error.localizedDescription
                showingAlert = true
            } else {
                // „Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàêÊàêÂäüÂæå„ÄÅÂ∞ë„ÅóÂæÖ„Å£„Å¶„Åã„ÇâÁîªÈù¢ÈÅ∑Áßª
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                    isLoading = false
                    // „Çµ„Ç§„É≥„Ç¢„ÉÉ„ÉóÊàêÂäüÂæå„ÇÇ„Éá„Éº„Çø„Çí„É™„É≠„Éº„Éâ
                    NotificationCenter.default.post(name: NSNotification.Name("UserLoggedIn"), object: nil)
                    dismiss()
                }
            }
        }
    }
}


#Preview {
    AuthenticationView()
}